import numpy as np
import matplotlib.pyplot as plt

def trapezoid(f,a,b,n):
    h=(b-a)/n
    sum=0.5*(f(a) + f(b))
    i=0
    for i in range (0,n):
        sum=sum + f(a + h*i)
        i+=1
    integ=sum*h
    #print(integ)
    return(integ)


def function1(x):
    return x**4 - 2*x + 1

#for i in range(0,2):
I_1=trapezoid(function1,0,2,10)
I_2=trapezoid(function1,0,2,20)


print("Problem 2:")
print("I_1:",I_1)
print("I_2:",I_2)
error=(1/3)*(I_2 - I_1)
print("Error function",error)
print(4.4-I_1)     ##missing higher order terms



"""
Problem 2: Runga-Kutta integration of order 1
Method: populate list of using eulers method to generate values

h is size of slices not number of slices
need step size
"""
print("================")
print("Problem 2:")

def function(x,t):
    return -x**3 + np.sin(t)
t=0
ydata=[]
xdata=np.linspace(0,10)
def eulers(a,b,c,n):   ##initial x, final x, final t, number of slices
    x_n=[a]   ### creates list to populate given initial value
    t_n=[0]
    x_i=x_n[1]   ##initial x is equal to first value in x list
    h=(x_n-i_x)/n
    while x_n[-1] < b:   ##iterates from initial_X to a given value of x
        y=x_i + h*function(x_n[-1],t_n)     ##use the LATEST value calculated
        ydata.append(y)
        t_n.append(t_n[-1]+h)    ##add a value to the t list with the latest value and the slice width
        x_i+=1
eulers(0,function,50,10)
plt.plot(xdata,ydata)
plt.show()

    ###x(t+h)=x(t) + h dx/dt
    ###y(t+h)=x(t) + h * f(x,t)
    ###y=i_x + h * f(x,t)
